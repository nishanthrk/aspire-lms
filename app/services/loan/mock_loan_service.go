// Code generated by MockGen. DO NOT EDIT.
// Source: app/services/loan/service.go

// Package loan_service is a generated GoMock package.
package loan_service

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	dto "github.com/nishanthrk/aspire-lms/app/dto"
	models "github.com/nishanthrk/aspire-lms/app/models"
	repayment_service "github.com/nishanthrk/aspire-lms/app/services/repayment"
	user_service "github.com/nishanthrk/aspire-lms/app/services/user"
)

// MockLoanService is a mock of LoanService interface.
type MockLoanService struct {
	ctrl     *gomock.Controller
	recorder *MockLoanServiceMockRecorder
}

// MockLoanServiceMockRecorder is the mock recorder for MockLoanService.
type MockLoanServiceMockRecorder struct {
	mock *MockLoanService
}

// NewMockLoanService creates a new mock instance.
func NewMockLoanService(ctrl *gomock.Controller) *MockLoanService {
	mock := &MockLoanService{ctrl: ctrl}
	mock.recorder = &MockLoanServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLoanService) EXPECT() *MockLoanServiceMockRecorder {
	return m.recorder
}

// ApproveLoanApplication mocks base method.
func (m *MockLoanService) ApproveLoanApplication(params dto.ApplicationApproveRequest, user models.User, repaymentSvc repayment_service.RepaymentService) (dto.ApplicationApproveResponse, dto.HandleError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ApproveLoanApplication", params, user, repaymentSvc)
	ret0, _ := ret[0].(dto.ApplicationApproveResponse)
	ret1, _ := ret[1].(dto.HandleError)
	return ret0, ret1
}

// ApproveLoanApplication indicates an expected call of ApproveLoanApplication.
func (mr *MockLoanServiceMockRecorder) ApproveLoanApplication(params, user, repaymentSvc interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ApproveLoanApplication", reflect.TypeOf((*MockLoanService)(nil).ApproveLoanApplication), params, user, repaymentSvc)
}

// CreateLoanApplication mocks base method.
func (m *MockLoanService) CreateLoanApplication(params dto.ApplicationCreateRequest, userSvc user_service.UserService, repaymentSvc repayment_service.RepaymentService) (dto.ApplicationCreateResponse, dto.HandleError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateLoanApplication", params, userSvc, repaymentSvc)
	ret0, _ := ret[0].(dto.ApplicationCreateResponse)
	ret1, _ := ret[1].(dto.HandleError)
	return ret0, ret1
}

// CreateLoanApplication indicates an expected call of CreateLoanApplication.
func (mr *MockLoanServiceMockRecorder) CreateLoanApplication(params, userSvc, repaymentSvc interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateLoanApplication", reflect.TypeOf((*MockLoanService)(nil).CreateLoanApplication), params, userSvc, repaymentSvc)
}

// GetLoanApplication mocks base method.
func (m *MockLoanService) GetLoanApplication(applicationId string, user models.User) (dto.ApplicationDetailsResponse, dto.HandleError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLoanApplication", applicationId, user)
	ret0, _ := ret[0].(dto.ApplicationDetailsResponse)
	ret1, _ := ret[1].(dto.HandleError)
	return ret0, ret1
}

// GetLoanApplication indicates an expected call of GetLoanApplication.
func (mr *MockLoanServiceMockRecorder) GetLoanApplication(applicationId, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLoanApplication", reflect.TypeOf((*MockLoanService)(nil).GetLoanApplication), applicationId, user)
}

// GetParticipantApplications mocks base method.
func (m *MockLoanService) GetParticipantApplications(user models.User) dto.ApplicationListResponse {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetParticipantApplications", user)
	ret0, _ := ret[0].(dto.ApplicationListResponse)
	return ret0
}

// GetParticipantApplications indicates an expected call of GetParticipantApplications.
func (mr *MockLoanServiceMockRecorder) GetParticipantApplications(user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetParticipantApplications", reflect.TypeOf((*MockLoanService)(nil).GetParticipantApplications), user)
}
