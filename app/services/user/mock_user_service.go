// Code generated by MockGen. DO NOT EDIT.
// Source: app/services/user/service.go

// Package user_service is a generated GoMock package.
package user_service

import (
	reflect "reflect"

	fiber "github.com/gofiber/fiber/v2"
	gomock "github.com/golang/mock/gomock"
	dto "github.com/nishanthrk/aspire-lms/app/dto"
	models "github.com/nishanthrk/aspire-lms/app/models"
)

// MockUserService is a mock of UserService interface.
type MockUserService struct {
	ctrl     *gomock.Controller
	recorder *MockUserServiceMockRecorder
}

// MockUserServiceMockRecorder is the mock recorder for MockUserService.
type MockUserServiceMockRecorder struct {
	mock *MockUserService
}

// NewMockUserService creates a new mock instance.
func NewMockUserService(ctrl *gomock.Controller) *MockUserService {
	mock := &MockUserService{ctrl: ctrl}
	mock.recorder = &MockUserServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserService) EXPECT() *MockUserServiceMockRecorder {
	return m.recorder
}

// AllocateEmployeeForProcess mocks base method.
func (m *MockUserService) AllocateEmployeeForProcess(application models.LoanApplication) (models.LoanApplicationParticipant, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AllocateEmployeeForProcess", application)
	ret0, _ := ret[0].(models.LoanApplicationParticipant)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AllocateEmployeeForProcess indicates an expected call of AllocateEmployeeForProcess.
func (mr *MockUserServiceMockRecorder) AllocateEmployeeForProcess(application interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AllocateEmployeeForProcess", reflect.TypeOf((*MockUserService)(nil).AllocateEmployeeForProcess), application)
}

// GenerateAuth mocks base method.
func (m *MockUserService) GenerateAuth(users models.User) (dto.LoginResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateAuth", users)
	ret0, _ := ret[0].(dto.LoginResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GenerateAuth indicates an expected call of GenerateAuth.
func (mr *MockUserServiceMockRecorder) GenerateAuth(users interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateAuth", reflect.TypeOf((*MockUserService)(nil).GenerateAuth), users)
}

// GetApplicationUser mocks base method.
func (m *MockUserService) GetApplicationUser(object dto.UserObject) models.User {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetApplicationUser", object)
	ret0, _ := ret[0].(models.User)
	return ret0
}

// GetApplicationUser indicates an expected call of GetApplicationUser.
func (mr *MockUserServiceMockRecorder) GetApplicationUser(object interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetApplicationUser", reflect.TypeOf((*MockUserService)(nil).GetApplicationUser), object)
}

// GetUserObject mocks base method.
func (m *MockUserService) GetUserObject(c *fiber.Ctx) models.User {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserObject", c)
	ret0, _ := ret[0].(models.User)
	return ret0
}

// GetUserObject indicates an expected call of GetUserObject.
func (mr *MockUserServiceMockRecorder) GetUserObject(c interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserObject", reflect.TypeOf((*MockUserService)(nil).GetUserObject), c)
}

// ValidateCredentials mocks base method.
func (m *MockUserService) ValidateCredentials(request dto.LoginRequest) (dto.LoginResponse, dto.HandleError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidateCredentials", request)
	ret0, _ := ret[0].(dto.LoginResponse)
	ret1, _ := ret[1].(dto.HandleError)
	return ret0, ret1
}

// ValidateCredentials indicates an expected call of ValidateCredentials.
func (mr *MockUserServiceMockRecorder) ValidateCredentials(request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateCredentials", reflect.TypeOf((*MockUserService)(nil).ValidateCredentials), request)
}
